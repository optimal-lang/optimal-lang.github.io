/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGD
#define SWIGD
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* Contract support. */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_DSetPendingException(SWIG_DException, msg); return nullreturn; } else


// Support for throwing D exceptions from C/C++.
typedef enum {
  SWIG_DException = 0,
  SWIG_DIllegalArgumentException,
  SWIG_DIllegalElementException,
  SWIG_DIOException,
  SWIG_DNoSuchElementException
} SWIG_DExceptionCodes;

typedef void (* SWIG_DExceptionCallback_t)(const char *);

typedef struct {
  SWIG_DExceptionCodes code;
  SWIG_DExceptionCallback_t callback;
} SWIG_DException_t;

static SWIG_DException_t SWIG_d_exceptions[] = {
  { SWIG_DException, NULL },
  { SWIG_DIllegalArgumentException, NULL },
  { SWIG_DIllegalElementException, NULL },
  { SWIG_DIOException, NULL },
  { SWIG_DNoSuchElementException, NULL }
};

static void SWIGUNUSED SWIG_DSetPendingException(SWIG_DExceptionCodes code, const char *msg) {
  if ((size_t)code < sizeof(SWIG_d_exceptions)/sizeof(SWIG_DException_t)) {
    SWIG_d_exceptions[code].callback(msg);
  } else {
    SWIG_d_exceptions[SWIG_DException].callback(msg);
  }
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterExceptionCallbacks_omscript(
  SWIG_DExceptionCallback_t exceptionCallback,
  SWIG_DExceptionCallback_t illegalArgumentCallback,
  SWIG_DExceptionCallback_t illegalElementCallback,
  SWIG_DExceptionCallback_t ioCallback,
  SWIG_DExceptionCallback_t noSuchElementCallback) {
  SWIG_d_exceptions[SWIG_DException].callback = exceptionCallback;
  SWIG_d_exceptions[SWIG_DIllegalArgumentException].callback = illegalArgumentCallback;
  SWIG_d_exceptions[SWIG_DIllegalElementException].callback = illegalElementCallback;
  SWIG_d_exceptions[SWIG_DIOException].callback = ioCallback;
  SWIG_d_exceptions[SWIG_DNoSuchElementException].callback = noSuchElementCallback;
}


// Callback for returning strings to D without leaking memory.
typedef char * (* SWIG_DStringHelperCallback)(const char *);
static SWIG_DStringHelperCallback SWIG_d_string_callback = NULL;

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterStringCallback_omscript(SWIG_DStringHelperCallback callback) {
  SWIG_d_string_callback = callback;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that D proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {

  // Director base class â€“ not used in D directors.
  class Director {
  };

  // Base class for director exceptions.
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  // Exception which is thrown when attempting to call a pure virtual method
  // from D code through the director layer.
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempted to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#include <string>


#include "omscript.h"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< om_data > *new_std_vector_Sl_om_data_Sg___SWIG_2(std::vector< std::shared_ptr< om_register > >::size_type capacity){
        std::vector< std::shared_ptr< class om_register > >* pv = 0;
        pv = new std::vector< std::shared_ptr< class om_register > >();

        // Might throw std::length_error.
        pv->reserve(capacity);

        return pv;
      }
SWIGINTERN std::vector< std::shared_ptr< om_register > >::const_reference std_vector_Sl_om_data_Sg__remove__SWIG_0(std::vector< om_data > *self){
        if (self->empty()) {
          throw std::out_of_range("Tried to remove last element from empty vector.");
        }

        std::vector< std::shared_ptr< class om_register > >::const_reference value = self->back();
        self->pop_back();
        return value;
      }
SWIGINTERN std::vector< std::shared_ptr< om_register > >::const_reference std_vector_Sl_om_data_Sg__remove__SWIG_1(std::vector< om_data > *self,std::vector< std::shared_ptr< om_register > >::size_type index){
        if (index >= self->size()) {
          throw std::out_of_range("Tried to remove element with invalid index.");
        }

        std::vector< std::shared_ptr< class om_register > >::iterator it = self->begin() + index;
        std::vector< std::shared_ptr< class om_register > >::const_reference value = *it;
        self->erase(it);
        return value;
      }
SWIGINTERN void std_vector_Sl_om_data_Sg__removeBack(std::vector< om_data > *self,std::vector< std::shared_ptr< om_register > >::size_type how_many){
        std::vector< std::shared_ptr< class om_register > >::iterator end = self->end();
        std::vector< std::shared_ptr< class om_register > >::iterator start = end - how_many;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_om_data_Sg__linearRemove(std::vector< om_data > *self,std::vector< std::shared_ptr< om_register > >::size_type start_index,std::vector< std::shared_ptr< om_register > >::size_type end_index){
        std::vector< std::shared_ptr< class om_register > >::iterator start = self->begin() + start_index;
        std::vector< std::shared_ptr< class om_register > >::iterator end = self->begin() + end_index;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_om_data_Sg__insertAt(std::vector< om_data > *self,std::vector< std::shared_ptr< om_register > >::size_type index,std::shared_ptr< om_register > const &x){
        std::vector< std::shared_ptr< class om_register > >::iterator it = self->begin() + index;
        self->insert(it, x);
      }
SWIGINTERN std::vector< std::shared_ptr< om_register > >::const_reference std_vector_Sl_om_data_Sg__getElement(std::vector< om_data > *self,std::vector< std::shared_ptr< om_register > >::size_type index){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to get value of element with invalid index.");
        }
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_om_data_Sg__setElement(std::vector< om_data > *self,std::vector< std::shared_ptr< om_register > >::size_type index,std::shared_ptr< om_register > const &val){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to set value of element with invalid index.");
        }
        (*self)[index] = val;
      }
SWIGINTERN std::shared_ptr< om_register > const &std_map_Sl_std_string_Sc_om_data_Sg__get(std::map< std::string,om_data > *self,std::string const &key){
          std::map< std::string, std::shared_ptr< class om_register >, std::less< std::string > >::iterator i = self->find(key);
          if (i != self->end())
            return i->second;
          else
            throw std::out_of_range("key not found");
        }
SWIGINTERN void std_map_Sl_std_string_Sc_om_data_Sg__set(std::map< std::string,om_data > *self,std::string const &key,std::shared_ptr< om_register > const &x){
          (*self)[key] = x;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_om_data_Sg__del(std::map< std::string,om_data > *self,std::string const &key){
          std::map< std::string, std::shared_ptr< class om_register >, std::less< std::string > >::iterator i = self->find(key);
          if (i != self->end())
            self->erase(i);
          else
            throw std::out_of_range("key not found");
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_om_data_Sg__has_key(std::map< std::string,om_data > *self,std::string const &key){
          std::map< std::string, std::shared_ptr< class om_register >, std::less< std::string > >::iterator i = self->find(key);
          return i != self->end();
        }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "omscript_wrap.h"

SwigDirector_om_callback::SwigDirector_om_callback() : om_callback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_om_callback::~SwigDirector_om_callback() {
  
}


om_data SwigDirector_om_callback::run(om_list_data arg0) {
  om_data c_result ;
  void * jresult = 0 ;
  void * jarg0  ;
  
  if (!swig_callback_run) {
    return om_callback::run(arg0);
  } else {
    jarg0 = (void *)new om_list_data((const om_list_data &)arg0);
    jresult = (void *) swig_callback_run(d_object, jarg0);
    if (!jresult) {
      SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Unexpected null return for type om_data");
      return c_result;
    }
    c_result = *(om_data *)jresult; 
  }
  return c_result;
}

void SwigDirector_om_callback::swig_connect_director(void* dobj, SWIG_Callback0_t callback_run) {
  d_object = dobj;swig_callback_run = callback_run;
}

void SwigDirector_om_callback::swig_init_callbacks() {
  swig_callback_run = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * D_new_om_data() {
  void * jresult ;
  std::shared_ptr< om_register > *result = 0 ;
  
  result = (std::shared_ptr< om_register > *)new std::shared_ptr< om_register >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_om_data(void * jarg1) {
  std::shared_ptr< om_register > *arg1 = (std::shared_ptr< om_register > *) 0 ;
  
  arg1 = (std::shared_ptr< om_register > *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_delete_om_callback(void * jarg1) {
  om_callback *arg1 = (om_callback *) 0 ;
  
  arg1 = (om_callback *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_om_callback_run(void * jarg1, void * jarg2) {
  void * jresult ;
  om_callback *arg1 = (om_callback *) 0 ;
  om_list_data arg2 ;
  om_list_data *argp2 ;
  om_data result;
  
  arg1 = (om_callback *)jarg1;
  argp2 = (om_list_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->run(arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_om_callback_runSwigExplicitom_callback(void * jarg1, void * jarg2) {
  void * jresult ;
  om_callback *arg1 = (om_callback *) 0 ;
  om_list_data arg2 ;
  om_list_data *argp2 ;
  om_data result;
  
  arg1 = (om_callback *)jarg1;
  argp2 = (om_list_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->om_callback::run(arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_om_callback() {
  void * jresult ;
  om_callback *result = 0 ;
  
  result = (om_callback *)new SwigDirector_om_callback();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_om_callback_director_connect(void *objarg, void *dobj, SwigDirector_om_callback::SWIG_Callback0_t callback0) {
  om_callback *obj = (om_callback *)objarg;
  SwigDirector_om_callback *director = static_cast<SwigDirector_om_callback *>(obj);
  director->swig_connect_director(dobj, callback0);
}


SWIGEXPORT int D_om_register_type_of(void * jarg1) {
  int jresult ;
  om_register *arg1 = (om_register *) 0 ;
  om_register::type result;
  
  arg1 = (om_register *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_register_printable_text(void * jarg1) {
  char * jresult ;
  om_register *arg1 = (om_register *) 0 ;
  std::string result;
  
  arg1 = (om_register *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_om_register_bool_value(void * jarg1) {
  unsigned int jresult ;
  om_register *arg1 = (om_register *) 0 ;
  bool result;
  
  arg1 = (om_register *)jarg1;
  result = (bool)(arg1)->bool_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_om_register_number_value(void * jarg1) {
  double jresult ;
  om_register *arg1 = (om_register *) 0 ;
  double result;
  
  arg1 = (om_register *)jarg1;
  result = (double)(arg1)->number_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_om_register_string_value(void * jarg1) {
  char * jresult ;
  om_register *arg1 = (om_register *) 0 ;
  std::string result;
  
  arg1 = (om_register *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_om_register_push(void * jarg1, void * jarg2) {
  om_register *arg1 = (om_register *) 0 ;
  om_data arg2 ;
  om_data *argp2 ;
  
  arg1 = (om_register *)jarg1;
  argp2 = (om_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->push(arg2);
}


SWIGEXPORT void * D_om_register_swigOpAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  om_register *arg1 = (om_register *) 0 ;
  om_register *arg2 = 0 ;
  om_data result;
  
  arg1 = (om_register *)jarg1;
  arg2 = (om_register *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "om_register & type is null");
    return 0;
  } 
  result = (arg1)->operator +(*arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_om_register_opCall(void * jarg1, void * jarg2) {
  void * jresult ;
  om_register *arg1 = (om_register *) 0 ;
  om_list_data arg2 ;
  om_list_data *argp2 ;
  om_data result;
  
  arg1 = (om_register *)jarg1;
  argp2 = (om_list_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->operator ()(arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_om_register_opIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  om_register *arg1 = (om_register *) 0 ;
  om_data arg2 ;
  om_data *argp2 ;
  om_data *result = 0 ;
  
  arg1 = (om_register *)jarg1;
  argp2 = (om_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg2 = *argp2; 
  result = (om_data *) &(arg1)->operator [](arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_om_register() {
  void * jresult ;
  om_register *result = 0 ;
  
  result = (om_register *)new om_register();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_om_register(void * jarg1) {
  om_register *arg1 = (om_register *) 0 ;
  
  arg1 = (om_register *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_om_undefined() {
  void * jresult ;
  om_undefined *result = 0 ;
  
  result = (om_undefined *)new om_undefined();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_om_undefined_type_of(void * jarg1) {
  int jresult ;
  om_undefined *arg1 = (om_undefined *) 0 ;
  om_register::type result;
  
  arg1 = (om_undefined *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_undefined_printable_text(void * jarg1) {
  char * jresult ;
  om_undefined *arg1 = (om_undefined *) 0 ;
  std::string result;
  
  arg1 = (om_undefined *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_om_undefined_string_value(void * jarg1) {
  char * jresult ;
  om_undefined *arg1 = (om_undefined *) 0 ;
  std::string result;
  
  arg1 = (om_undefined *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_delete_om_undefined(void * jarg1) {
  om_undefined *arg1 = (om_undefined *) 0 ;
  
  arg1 = (om_undefined *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_om_null() {
  void * jresult ;
  om_null *result = 0 ;
  
  result = (om_null *)new om_null();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_om_null_type_of(void * jarg1) {
  int jresult ;
  om_null *arg1 = (om_null *) 0 ;
  om_register::type result;
  
  arg1 = (om_null *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_null_printable_text(void * jarg1) {
  char * jresult ;
  om_null *arg1 = (om_null *) 0 ;
  std::string result;
  
  arg1 = (om_null *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_om_null_string_value(void * jarg1) {
  char * jresult ;
  om_null *arg1 = (om_null *) 0 ;
  std::string result;
  
  arg1 = (om_null *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_delete_om_null(void * jarg1) {
  om_null *arg1 = (om_null *) 0 ;
  
  arg1 = (om_null *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_bool_value__SWIG_0(unsigned int jarg1) {
  unsigned int jresult ;
  bool arg1 ;
  bool result;
  
  arg1 = jarg1 ? true : false;
  result = (bool)bool_value(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_bool_value__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  om_data arg1 ;
  om_data *argp1 ;
  bool result;
  
  argp1 = (om_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)bool_value(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_bool_value__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  om_register *arg1 = (om_register *) 0 ;
  bool result;
  
  arg1 = (om_register *)jarg1;
  result = (bool)bool_value(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_number_value__SWIG_0(void * jarg1) {
  double jresult ;
  om_data arg1 ;
  om_data *argp1 ;
  double result;
  
  argp1 = (om_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg1 = *argp1; 
  result = (double)number_value(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_number_value__SWIG_1(void * jarg1) {
  double jresult ;
  om_register *arg1 = (om_register *) 0 ;
  double result;
  
  arg1 = (om_register *)jarg1;
  result = (double)number_value(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_string_value__SWIG_0(void * jarg1) {
  char * jresult ;
  om_data arg1 ;
  om_data *argp1 ;
  std::string result;
  
  argp1 = (om_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg1 = *argp1; 
  result = string_value(arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_string_value__SWIG_1(void * jarg1) {
  char * jresult ;
  om_register *arg1 = (om_register *) 0 ;
  std::string result;
  
  arg1 = (om_register *)jarg1;
  result = string_value(arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_printable_text(void * jarg1) {
  char * jresult ;
  om_data arg1 ;
  om_data *argp1 ;
  std::string result;
  
  argp1 = (om_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg1 = *argp1; 
  result = printable_text(arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_stringify_sting(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = stringify_sting((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_new_om_bool(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  om_bool *result = 0 ;
  
  arg1 = jarg1 ? true : false;
  result = (om_bool *)new om_bool(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_om_bool_type_of(void * jarg1) {
  int jresult ;
  om_bool *arg1 = (om_bool *) 0 ;
  om_register::type result;
  
  arg1 = (om_bool *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_bool_printable_text(void * jarg1) {
  char * jresult ;
  om_bool *arg1 = (om_bool *) 0 ;
  std::string result;
  
  arg1 = (om_bool *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_om_bool_string_value(void * jarg1) {
  char * jresult ;
  om_bool *arg1 = (om_bool *) 0 ;
  std::string result;
  
  arg1 = (om_bool *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_om_bool_bool_value(void * jarg1) {
  unsigned int jresult ;
  om_bool *arg1 = (om_bool *) 0 ;
  bool result;
  
  arg1 = (om_bool *)jarg1;
  result = (bool)(arg1)->bool_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_om_bool_number_value(void * jarg1) {
  double jresult ;
  om_bool *arg1 = (om_bool *) 0 ;
  double result;
  
  arg1 = (om_bool *)jarg1;
  result = (double)(arg1)->number_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_om_bool(void * jarg1) {
  om_bool *arg1 = (om_bool *) 0 ;
  
  arg1 = (om_bool *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_om_number(double jarg1) {
  void * jresult ;
  double arg1 ;
  om_number *result = 0 ;
  
  arg1 = (double)jarg1;
  result = (om_number *)new om_number(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_om_number_type_of(void * jarg1) {
  int jresult ;
  om_number *arg1 = (om_number *) 0 ;
  om_register::type result;
  
  arg1 = (om_number *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_number_printable_text(void * jarg1) {
  char * jresult ;
  om_number *arg1 = (om_number *) 0 ;
  std::string result;
  
  arg1 = (om_number *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double D_om_number_number_value(void * jarg1) {
  double jresult ;
  om_number *arg1 = (om_number *) 0 ;
  double result;
  
  arg1 = (om_number *)jarg1;
  result = (double)(arg1)->number_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_om_number_string_value(void * jarg1) {
  char * jresult ;
  om_number *arg1 = (om_number *) 0 ;
  std::string result;
  
  arg1 = (om_number *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_om_number_bool_value(void * jarg1) {
  unsigned int jresult ;
  om_number *arg1 = (om_number *) 0 ;
  bool result;
  
  arg1 = (om_number *)jarg1;
  result = (bool)(arg1)->bool_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_om_number(void * jarg1) {
  om_number *arg1 = (om_number *) 0 ;
  
  arg1 = (om_number *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_om_string(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  om_string *result = 0 ;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (om_string *)new om_string((std::string const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_om_string_type_of(void * jarg1) {
  int jresult ;
  om_string *arg1 = (om_string *) 0 ;
  om_register::type result;
  
  arg1 = (om_string *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_string_printable_text(void * jarg1) {
  char * jresult ;
  om_string *arg1 = (om_string *) 0 ;
  std::string result;
  
  arg1 = (om_string *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_om_string_string_value(void * jarg1) {
  char * jresult ;
  om_string *arg1 = (om_string *) 0 ;
  std::string result;
  
  arg1 = (om_string *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_om_string_bool_value(void * jarg1) {
  unsigned int jresult ;
  om_string *arg1 = (om_string *) 0 ;
  bool result;
  
  arg1 = (om_string *)jarg1;
  result = (bool)(arg1)->bool_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_om_string(void * jarg1) {
  om_string *arg1 = (om_string *) 0 ;
  
  arg1 = (om_string *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_om_list__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  om_list_data arg1 ;
  om_dict_data arg2 ;
  om_list_data *argp1 ;
  om_dict_data *argp2 ;
  om_list *result = 0 ;
  
  argp1 = (om_list_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (om_dict_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_dict_data");
    return 0;
  }
  arg2 = *argp2; 
  result = (om_list *)new om_list(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_om_list__SWIG_1(void * jarg1) {
  void * jresult ;
  om_list_data arg1 ;
  om_list_data *argp1 ;
  om_list *result = 0 ;
  
  argp1 = (om_list_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg1 = *argp1; 
  result = (om_list *)new om_list(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_om_list__SWIG_2() {
  void * jresult ;
  om_list *result = 0 ;
  
  result = (om_list *)new om_list();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_om_list_type_of(void * jarg1) {
  int jresult ;
  om_list *arg1 = (om_list *) 0 ;
  om_register::type result;
  
  arg1 = (om_list *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_list_printable_text(void * jarg1) {
  char * jresult ;
  om_list *arg1 = (om_list *) 0 ;
  std::string result;
  
  arg1 = (om_list *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_om_list_string_value(void * jarg1) {
  char * jresult ;
  om_list *arg1 = (om_list *) 0 ;
  std::string result;
  
  arg1 = (om_list *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_om_list_bool_value(void * jarg1) {
  unsigned int jresult ;
  om_list *arg1 = (om_list *) 0 ;
  bool result;
  
  arg1 = (om_list *)jarg1;
  result = (bool)(arg1)->bool_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_om_list_push(void * jarg1, void * jarg2) {
  om_list *arg1 = (om_list *) 0 ;
  om_data arg2 ;
  om_data *argp2 ;
  
  arg1 = (om_list *)jarg1;
  argp2 = (om_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->push(arg2);
}


SWIGEXPORT void * D_om_list_opIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  om_list *arg1 = (om_list *) 0 ;
  om_data arg2 ;
  om_data *argp2 ;
  om_data *result = 0 ;
  
  arg1 = (om_list *)jarg1;
  argp2 = (om_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg2 = *argp2; 
  result = (om_data *) &(arg1)->operator [](arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_om_list(void * jarg1) {
  om_list *arg1 = (om_list *) 0 ;
  
  arg1 = (om_list *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_om_dict__SWIG_0(void * jarg1) {
  void * jresult ;
  om_dict_data arg1 ;
  om_dict_data *argp1 ;
  om_dict *result = 0 ;
  
  argp1 = (om_dict_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_dict_data");
    return 0;
  }
  arg1 = *argp1; 
  result = (om_dict *)new om_dict(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_om_dict__SWIG_1() {
  void * jresult ;
  om_dict *result = 0 ;
  
  result = (om_dict *)new om_dict();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_om_dict_type_of(void * jarg1) {
  int jresult ;
  om_dict *arg1 = (om_dict *) 0 ;
  om_register::type result;
  
  arg1 = (om_dict *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_dict_printable_text(void * jarg1) {
  char * jresult ;
  om_dict *arg1 = (om_dict *) 0 ;
  std::string result;
  
  arg1 = (om_dict *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_om_dict_string_value(void * jarg1) {
  char * jresult ;
  om_dict *arg1 = (om_dict *) 0 ;
  std::string result;
  
  arg1 = (om_dict *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_om_dict_bool_value(void * jarg1) {
  unsigned int jresult ;
  om_dict *arg1 = (om_dict *) 0 ;
  bool result;
  
  arg1 = (om_dict *)jarg1;
  result = (bool)(arg1)->bool_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_om_dict(void * jarg1) {
  om_dict *arg1 = (om_dict *) 0 ;
  
  arg1 = (om_dict *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_om_func(void * jarg1) {
  void * jresult ;
  om_callback *arg1 = (om_callback *) 0 ;
  om_func *result = 0 ;
  
  arg1 = (om_callback *)jarg1;
  result = (om_func *)new om_func(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_om_func_type_of(void * jarg1) {
  int jresult ;
  om_func *arg1 = (om_func *) 0 ;
  om_register::type result;
  
  arg1 = (om_func *)jarg1;
  result = (om_register::type)(arg1)->type_of();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * D_om_func_printable_text(void * jarg1) {
  char * jresult ;
  om_func *arg1 = (om_func *) 0 ;
  std::string result;
  
  arg1 = (om_func *)jarg1;
  result = (arg1)->printable_text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_om_func_string_value(void * jarg1) {
  char * jresult ;
  om_func *arg1 = (om_func *) 0 ;
  std::string result;
  
  arg1 = (om_func *)jarg1;
  result = (arg1)->string_value();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_om_func_bool_value(void * jarg1) {
  unsigned int jresult ;
  om_func *arg1 = (om_func *) 0 ;
  bool result;
  
  arg1 = (om_func *)jarg1;
  result = (bool)(arg1)->bool_value();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_om_func_opCall(void * jarg1, void * jarg2) {
  void * jresult ;
  om_func *arg1 = (om_func *) 0 ;
  om_list_data arg2 ;
  om_list_data *argp2 ;
  om_data result;
  
  arg1 = (om_func *)jarg1;
  argp2 = (om_list_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->operator ()(arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_om_func(void * jarg1) {
  om_func *arg1 = (om_func *) 0 ;
  
  arg1 = (om_func *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_undefined() {
  void * jresult ;
  om_data result;
  
  result = new_undefined();
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_null() {
  void * jresult ;
  om_data result;
  
  result = new_null();
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_bool(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  om_data result;
  
  arg1 = jarg1 ? true : false;
  result = new_bool(arg1);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_number(double jarg1) {
  void * jresult ;
  double arg1 ;
  om_data result;
  
  arg1 = (double)jarg1;
  result = new_number(arg1);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_string(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  om_data result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = new_string((std::string const &)*arg1);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_list__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  om_list_data arg1 ;
  om_dict_data arg2 ;
  om_list_data *argp1 ;
  om_dict_data *argp2 ;
  om_data result;
  
  argp1 = (om_list_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (om_dict_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_dict_data");
    return 0;
  }
  arg2 = *argp2; 
  result = new_list(arg1,arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_list__SWIG_1(void * jarg1) {
  void * jresult ;
  om_list_data arg1 ;
  om_list_data *argp1 ;
  om_data result;
  
  argp1 = (om_list_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg1 = *argp1; 
  result = new_list(arg1);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_list__SWIG_2() {
  void * jresult ;
  om_data result;
  
  result = new_list();
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_dict(void * jarg1) {
  void * jresult ;
  om_dict_data arg1 ;
  om_dict_data *argp1 ;
  om_data result;
  
  argp1 = (om_dict_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_dict_data");
    return 0;
  }
  arg1 = *argp1; 
  result = new_dict(arg1);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_func(void * jarg1) {
  void * jresult ;
  om_callback *arg1 = (om_callback *) 0 ;
  om_data result;
  
  arg1 = (om_callback *)jarg1;
  result = new_func(arg1);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_get_arg(void * jarg1, long long jarg2) {
  void * jresult ;
  om_list_data *arg1 = 0 ;
  long long arg2 ;
  om_data result;
  
  arg1 = (om_list_data *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "om_list_data & type is null");
    return 0;
  } 
  arg2 = (long long)jarg2;
  result = get_arg(*arg1,arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_print(void * jarg1) {
  void * jresult ;
  om_data arg1 ;
  om_data *argp1 ;
  om_data result;
  
  argp1 = (om_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg1 = *argp1; 
  result = print(arg1);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_eq(void * jarg1, void * jarg2) {
  void * jresult ;
  om_data arg1 ;
  om_data arg2 ;
  om_data *argp1 ;
  om_data *argp2 ;
  om_data result;
  
  argp1 = (om_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (om_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg2 = *argp2; 
  result = eq(arg1,arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_equal(void * jarg1, void * jarg2) {
  void * jresult ;
  om_data arg1 ;
  om_data arg2 ;
  om_data *argp1 ;
  om_data *argp2 ;
  om_data result;
  
  argp1 = (om_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (om_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg2 = *argp2; 
  result = equal(arg1,arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_call(void * jarg1, void * jarg2) {
  void * jresult ;
  om_data arg1 ;
  om_list_data arg2 ;
  om_data *argp1 ;
  om_list_data *argp2 ;
  om_data result;
  
  argp1 = (om_data *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_data");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (om_list_data *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null om_list_data");
    return 0;
  }
  arg2 = *argp2; 
  result = call(arg1,arg2);
  jresult = new om_data((const om_data &)result); 
  return jresult;
}


SWIGEXPORT void * D_test_long_double() {
  void * jresult ;
  long double result;
  
  result = (long double)test_long_double();
  jresult = new long double((const long double &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_om_list_data_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  bool result;
  
  arg1 = (std::vector< om_data > *)jarg1;
  result = (bool)((std::vector< om_data > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_om_list_data_clear(void * jarg1) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_om_list_data_push_back(void * jarg1, void * jarg2) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::shared_ptr< om_register > *arg2 = 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  arg2 = (std::shared_ptr< om_register > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::shared_ptr< om_register > const & type is null");
    return ;
  } 
  (arg1)->push_back((std::shared_ptr< om_register > const &)*arg2);
}


SWIGEXPORT void D_om_list_data_pop_back(void * jarg1) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  (arg1)->pop_back();
}


SWIGEXPORT size_t D_om_list_data_size(void * jarg1) {
  size_t jresult ;
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type result;
  
  arg1 = (std::vector< om_data > *)jarg1;
  result = ((std::vector< om_data > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_om_list_data_capacity(void * jarg1) {
  size_t jresult ;
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type result;
  
  arg1 = (std::vector< om_data > *)jarg1;
  result = ((std::vector< om_data > const *)arg1)->capacity();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_om_list_data_reserve(void * jarg1, size_t jarg2) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type arg2 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  arg2 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_new_om_list_data__SWIG_0() {
  void * jresult ;
  std::vector< om_data > *result = 0 ;
  
  result = (std::vector< om_data > *)new std::vector< om_data >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_om_list_data__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< om_data > *arg1 = 0 ;
  std::vector< om_data > *result = 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::vector< om_data > const & type is null");
    return 0;
  } 
  result = (std::vector< om_data > *)new std::vector< om_data >((std::vector< om_data > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_om_list_data__SWIG_2(size_t jarg1) {
  void * jresult ;
  std::vector< std::shared_ptr< om_register > >::size_type arg1 ;
  std::vector< om_data > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg1;
  try {
    result = (std::vector< om_data > *)new_std_vector_Sl_om_data_Sg___SWIG_2(arg1);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_om_list_data_remove__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::value_type *result = 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  try {
    result = (std::vector< std::shared_ptr< om_register > >::value_type *) &std_vector_Sl_om_data_Sg__remove__SWIG_0(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_om_list_data_remove__SWIG_1(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type arg2 ;
  std::vector< std::shared_ptr< om_register > >::value_type *result = 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  arg2 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg2;
  try {
    result = (std::vector< std::shared_ptr< om_register > >::value_type *) &std_vector_Sl_om_data_Sg__remove__SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_om_list_data_removeBack(void * jarg1, size_t jarg2) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type arg2 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  arg2 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg2;
  try {
    std_vector_Sl_om_data_Sg__removeBack(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_om_list_data_linearRemove(void * jarg1, size_t jarg2, size_t jarg3) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type arg2 ;
  std::vector< std::shared_ptr< om_register > >::size_type arg3 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  arg2 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg2;
  arg3 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg3;
  try {
    std_vector_Sl_om_data_Sg__linearRemove(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_om_list_data_insertAt(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type arg2 ;
  std::shared_ptr< om_register > *arg3 = 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  arg2 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg2;
  arg3 = (std::shared_ptr< om_register > *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::shared_ptr< om_register > const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_om_data_Sg__insertAt(arg1,arg2,(std::shared_ptr< om_register > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_om_list_data_getElement(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type arg2 ;
  std::vector< std::shared_ptr< om_register > >::value_type *result = 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  arg2 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg2;
  try {
    result = (std::vector< std::shared_ptr< om_register > >::value_type *) &std_vector_Sl_om_data_Sg__getElement(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_om_list_data_setElement(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  std::vector< std::shared_ptr< om_register > >::size_type arg2 ;
  std::shared_ptr< om_register > *arg3 = 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  arg2 = (std::vector< std::shared_ptr< om_register > >::size_type)jarg2;
  arg3 = (std::shared_ptr< om_register > *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::shared_ptr< om_register > const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_om_data_Sg__setElement(arg1,arg2,(std::shared_ptr< om_register > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_delete_om_list_data(void * jarg1) {
  std::vector< om_data > *arg1 = (std::vector< om_data > *) 0 ;
  
  arg1 = (std::vector< om_data > *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_om_dict_data__SWIG_0() {
  void * jresult ;
  std::map< std::string,om_data > *result = 0 ;
  
  result = (std::map< std::string,om_data > *)new std::map< std::string,om_data >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_om_dict_data__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,om_data > *arg1 = 0 ;
  std::map< std::string,om_data > *result = 0 ;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::map< std::string,om_data > const & type is null");
    return 0;
  } 
  result = (std::map< std::string,om_data > *)new std::map< std::string,om_data >((std::map< std::string,om_data > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_om_dict_data_size(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,om_data > *arg1 = (std::map< std::string,om_data > *) 0 ;
  unsigned int result;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  result = (unsigned int)((std::map< std::string,om_data > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_om_dict_data_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,om_data > *arg1 = (std::map< std::string,om_data > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  result = (bool)((std::map< std::string,om_data > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_om_dict_data_clear(void * jarg1) {
  std::map< std::string,om_data > *arg1 = (std::map< std::string,om_data > *) 0 ;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void * D_om_dict_data_get(void * jarg1, char * jarg2) {
  void * jresult ;
  std::map< std::string,om_data > *arg1 = (std::map< std::string,om_data > *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< om_register > *result = 0 ;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::shared_ptr< om_register > *) &std_map_Sl_std_string_Sc_om_data_Sg__get(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_om_dict_data_set(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,om_data > *arg1 = (std::map< std::string,om_data > *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< om_register > *arg3 = 0 ;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::shared_ptr< om_register > *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::shared_ptr< om_register > const & type is null");
    return ;
  } 
  std_map_Sl_std_string_Sc_om_data_Sg__set(arg1,(std::string const &)*arg2,(std::shared_ptr< om_register > const &)*arg3);
}


SWIGEXPORT void D_om_dict_data_del(void * jarg1, char * jarg2) {
  std::map< std::string,om_data > *arg1 = (std::map< std::string,om_data > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    std_map_Sl_std_string_Sc_om_data_Sg__del(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int D_om_dict_data_has_key(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,om_data > *arg1 = (std::map< std::string,om_data > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_om_data_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_om_dict_data(void * jarg1) {
  std::map< std::string,om_data > *arg1 = (std::map< std::string,om_data > *) 0 ;
  
  arg1 = (std::map< std::string,om_data > *)jarg1;
  delete arg1;
}


SWIGEXPORT om_register * D_om_undefined_Upcast(om_register *objectRef) {
    return (om_register *)objectRef;
}

SWIGEXPORT om_register * D_om_null_Upcast(om_register *objectRef) {
    return (om_register *)objectRef;
}

SWIGEXPORT om_register * D_om_bool_Upcast(om_register *objectRef) {
    return (om_register *)objectRef;
}

SWIGEXPORT om_register * D_om_number_Upcast(om_register *objectRef) {
    return (om_register *)objectRef;
}

SWIGEXPORT om_register * D_om_string_Upcast(om_register *objectRef) {
    return (om_register *)objectRef;
}

SWIGEXPORT om_register * D_om_list_Upcast(om_register *objectRef) {
    return (om_register *)objectRef;
}

SWIGEXPORT om_register * D_om_dict_Upcast(om_register *objectRef) {
    return (om_register *)objectRef;
}

SWIGEXPORT om_register * D_om_func_Upcast(om_register *objectRef) {
    return (om_register *)objectRef;
}

#ifdef __cplusplus
}
#endif

