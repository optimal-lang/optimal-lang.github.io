/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "public";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ex-ball.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/code2ary.ts":
/*!*************************!*\
  !*** ./src/code2ary.ts ***!
  \*************************/
/*! exports provided: code2ary */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"code2ary\", function() { return code2ary; });\nfunction tokenize_regexp() {\r\n    return /[\\s,]*([()\\[\\]'`]|\"(?:\\\\.|[^\\\\\"])*\"|@(?:@@|[^@])*@|;.*|[^\\s,()\\[\\]'\"`;@]*)/g;\r\n    //return new RegExp(\"[\\\\s,]*([()\\\\[\\\\]'`]|\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"])*\\\"|@(?:@@|[^@])*@|;.*|[^\\\\s,()\\\\[\\\\]'\\\"`;@]*)\", \"g\");\r\n}\r\nfunction tokenize(str) {\r\n    let re = tokenize_regexp();\r\n    let result = [];\r\n    let token;\r\n    while ((token = re.exec(str)[1]) !== \"\") {\r\n        if (token[0] === \";\")\r\n            continue;\r\n        result.push(token);\r\n    }\r\n    return result;\r\n}\r\nfunction read_token(code, exp) {\r\n    if (code.length === 0)\r\n        return undefined;\r\n    let token = code.shift();\r\n    exp.push(token);\r\n    return token;\r\n}\r\nfunction read_list(code, exp, ch) {\r\n    let result = [];\r\n    let ast;\r\n    while ((ast = read_sexp(code, exp)) !== undefined) {\r\n        if (ast === \"]\") {\r\n            if (ch !== \"[\")\r\n                code.unshift(\"]\");\r\n            break;\r\n        }\r\n        else if (ast === \")\") {\r\n            break;\r\n        }\r\n        result.push(ast);\r\n    }\r\n    return result;\r\n}\r\nfunction read_sexp(code, exp) {\r\n    let token = read_token(code, exp);\r\n    if (token === undefined)\r\n        return undefined;\r\n    let ch = token[0];\r\n    switch (ch) {\r\n        case \"(\":\r\n        case \"[\":\r\n            let lst = read_list(code, exp, ch);\r\n            return lst;\r\n        case \")\":\r\n        case \"]\":\r\n            return ch;\r\n        case \"'\":\r\n            let ast = read_sexp(code, exp);\r\n            return [\"`\", ast];\r\n        case '\"':\r\n            token = JSON.parse(token);\r\n            return [\"`\", token];\r\n        case \"@\":\r\n            token = token.replace(/(^@|@$)/g, \"\");\r\n            token = token.replace(/(@@)/g, \"@\");\r\n            return [\"@\", token];\r\n        case \"#\":\r\n            return token;\r\n        default:\r\n            //if (isFinite(token)) return [\"@\", token];\r\n            return token;\r\n    }\r\n}\r\nfunction join_sexp(exp) {\r\n    if (exp.length === 0)\r\n        return \"\";\r\n    let last = exp.shift();\r\n    let result = \"\" + last;\r\n    while (exp.length > 0) {\r\n        let token = exp.shift();\r\n        if (token !== \")\" &&\r\n            token !== \"]\" &&\r\n            last !== \"(\" &&\r\n            last !== \"[\" &&\r\n            last !== \"'\")\r\n            result += \" \";\r\n        if (token === \"[\")\r\n            token = \"(\";\r\n        if (token === \"]\")\r\n            token = \")\";\r\n        result += token;\r\n        last = token;\r\n    }\r\n    return result;\r\n}\r\nfunction code2ary(text) {\r\n    let code = tokenize(text);\r\n    let result = [];\r\n    while (true) {\r\n        let exp = [];\r\n        let ast = read_sexp(code, exp);\r\n        if (ast === undefined)\r\n            break;\r\n        if (ast === \")\")\r\n            continue;\r\n        if (ast === \"]\")\r\n            continue;\r\n        result.push([join_sexp(exp), ast]);\r\n    }\r\n    return result;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29kZTJhcnkudHM/MTU0MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUEsU0FBUyxlQUFlO0lBQ3RCLE9BQU8sNkVBQTZFLENBQUM7SUFDckYscUhBQXFIO0FBQ3ZILENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxHQUFXO0lBQzNCLElBQUksRUFBRSxHQUFHLGVBQWUsRUFBRSxDQUFDO0lBQzNCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLEtBQUssQ0FBQztJQUNWLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO1lBQUUsU0FBUztRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BCO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLElBQW1CLEVBQUUsR0FBa0I7SUFDekQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztJQUN4QyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsQ0FBQztJQUNqQixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FDaEIsSUFBbUIsRUFDbkIsR0FBa0IsRUFDbEIsRUFBVTtJQUVWLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLEdBQUcsQ0FBQztJQUNSLE9BQU8sQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtRQUNqRCxJQUFJLEdBQUcsS0FBSyxHQUFH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RUFBRSxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxHQUFHLEtBQUssU0FBUztZQUFFLE1BQU07UUFDN0IsSUFBSSxHQUFHLEtBQUssR0FBRztZQUFFLFNBQVM7UUFDMUIsSUFBSSxHQUFHLEtBQUssR0FBRztZQUFFLFNBQVM7UUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3BDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsImZpbGUiOiIuL3NyYy9jb2RlMmFyeS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHRva2VuaXplX3JlZ2V4cCgpIHtcbiAgcmV0dXJuIC9bXFxzLF0qKFsoKVxcW1xcXSdgXXxcIig/OlxcXFwufFteXFxcXFwiXSkqXCJ8QCg/OkBAfFteQF0pKkB8Oy4qfFteXFxzLCgpXFxbXFxdJ1wiYDtAXSopL2c7XG4gIC8vcmV0dXJuIG5ldyBSZWdFeHAoXCJbXFxcXHMsXSooWygpXFxcXFtcXFxcXSdgXXxcXFwiKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqXFxcInxAKD86QEB8W15AXSkqQHw7Lip8W15cXFxccywoKVxcXFxbXFxcXF0nXFxcImA7QF0qKVwiLCBcImdcIik7XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplKHN0cjogc3RyaW5nKSB7XG4gIGxldCByZSA9IHRva2VuaXplX3JlZ2V4cCgpO1xuICBsZXQgcmVzdWx0ID0gW107XG4gIGxldCB0b2tlbjtcbiAgd2hpbGUgKCh0b2tlbiA9IHJlLmV4ZWMoc3RyKSFbMV0pICE9PSBcIlwiKSB7XG4gICAgaWYgKHRva2VuWzBdID09PSBcIjtcIikgY29udGludWU7XG4gICAgcmVzdWx0LnB1c2godG9rZW4pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRfdG9rZW4oY29kZTogQXJyYXk8c3RyaW5nPiwgZXhwOiBBcnJheTxzdHJpbmc+KSB7XG4gIGlmIChjb2RlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IHRva2VuID0gY29kZS5zaGlmdCgpO1xuICBleHAucHVzaCh0b2tlbiEpO1xuICByZXR1cm4gdG9rZW47XG59XG5cbmZ1bmN0aW9uIHJlYWRfbGlzdChcbiAgY29kZTogQXJyYXk8c3RyaW5nPixcbiAgZXhwOiBBcnJheTxzdHJpbmc+LFxuICBjaDogc3RyaW5nXG4pOiBBcnJheTxhbnk+IHtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICBsZXQgYXN0O1xuICB3aGlsZSAoKGFzdCA9IHJlYWRfc2V4cChjb2RlLCBleHApKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGFzdCA9PT0gXCJdXCIpIHtcbiAgICAgIGlmIChjaCAhPT0gXCJbXCIpIGNvZGUudW5zaGlmdChcIl1cIik7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGFzdCA9PT0gXCIpXCIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXN1bHQucHVzaChhc3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRfc2V4cChjb2RlOiBBcnJheTxzdHJpbmc+LCBleHA6IEFycmF5PHN0cmluZz4pOiBhbnkge1xuICBsZXQgdG9rZW4gPSByZWFkX3Rva2VuKGNvZGUsIGV4cCk7XG4gIGlmICh0b2tlbiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgY2ggPSB0b2tlblswXTtcbiAgc3dpdGNoIChjaCkge1xuICAgIGNhc2UgXCIoXCI6XG4gICAgY2FzZSBcIltcIjpcbiAgICAgIGxldCBsc3QgPSByZWFkX2xpc3QoY29kZSwgZXhwLCBjaCk7XG4gICAgICByZXR1cm4gbHN0O1xuICAgIGNhc2UgXCIpXCI6XG4gICAgY2FzZSBcIl1cIjpcbiAgICAgIHJldHVybiBjaDtcbiAgICBjYXNlIFwiJ1wiOlxuICAgICAgbGV0IGFzdCA9IHJlYWRfc2V4cChjb2RlLCBleHApO1xuICAgICAgcmV0dXJuIFtcImBcIiwgYXN0XTtcbiAgICBjYXNlICdcIic6XG4gICAgICB0b2tlbiA9IEpTT04ucGFyc2UodG9rZW4pO1xuICAgICAgcmV0dXJuIFtcImBcIiwgdG9rZW5dO1xuICAgIGNhc2UgXCJAXCI6XG4gICAgICB0b2tlbiA9IHRva2VuLnJlcGxhY2UoLyheQHxAJCkvZywgXCJcIik7XG4gICAgICB0b2tlbiA9IHRva2VuLnJlcGxhY2UoLyhAQCkvZywgXCJAXCIpO1xuICAgICAgcmV0dXJuIFtcIkBcIiwgdG9rZW5dO1xuICAgIGNhc2UgXCIjXCI6XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vaWYgKGlzRmluaXRlKHRva2VuKSkgcmV0dXJuIFtcIkBcIiwgdG9rZW5dO1xuICAgICAgcmV0dXJuIHRva2VuO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpvaW5fc2V4cChleHA6IEFycmF5PHN0cmluZz4pIHtcbiAgaWYgKGV4cC5sZW5ndGggPT09IDApIHJldHVybiBcIlwiO1xuICBsZXQgbGFzdCA9IGV4cC5zaGlmdCgpO1xuICBsZXQgcmVzdWx0ID0gXCJcIiArIGxhc3Q7XG4gIHdoaWxlIChleHAubGVuZ3RoID4gMCkge1xuICAgIGxldCB0b2tlbiA9IGV4cC5zaGlmdCgpO1xuICAgIGlmIChcbiAgICAgIHRva2VuICE9PSBcIilcIiAmJlxuICAgICAgdG9rZW4gIT09IFwiXVwiICYmXG4gICAgICBsYXN0ICE9PSBcIihcIiAmJlxuICAgICAgbGFzdCAhPT0gXCJbXCIgJiZcbiAgICAgIGxhc3QgIT09IFwiJ1wiXG4gICAgKVxuICAgICAgcmVzdWx0ICs9IFwiIFwiO1xuICAgIGlmICh0b2tlbiA9PT0gXCJbXCIpIHRva2VuID0gXCIoXCI7XG4gICAgaWYgKHRva2VuID09PSBcIl1cIikgdG9rZW4gPSBcIilcIjtcbiAgICByZXN1bHQgKz0gdG9rZW47XG4gICAgbGFzdCA9IHRva2VuO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2RlMmFyeSh0ZXh0OiBzdHJpbmcpIHtcbiAgbGV0IGNvZGUgPSB0b2tlbml6ZSh0ZXh0KTtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGxldCBleHA6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgICBsZXQgYXN0ID0gcmVhZF9zZXhwKGNvZGUsIGV4cCk7XG4gICAgaWYgKGFzdCA9PT0gdW5kZWZpbmVkKSBicmVhaztcbiAgICBpZiAoYXN0ID09PSBcIilcIikgY29udGludWU7XG4gICAgaWYgKGFzdCA9PT0gXCJdXCIpIGNvbnRpbnVlO1xuICAgIHJlc3VsdC5wdXNoKFtqb2luX3NleHAoZXhwKSwgYXN0XSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/code2ary.ts\n");

/***/ }),

/***/ "./src/ex-ball.ts":
/*!************************!*\
  !*** ./src/ex-ball.ts ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _optiMAL2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./optiMAL2 */ \"./src/optiMAL2.ts\");\n\r\nvar glob = Object(_optiMAL2__WEBPACK_IMPORTED_MODULE_0__[\"optiMAL\"])(window);\r\nglob.runAll(`\n(define w 1024)\n(define h 768)\n(define starCount 2500)\n;(define sx (+ 1.0 (/ @Math.random()@ 20]\n;(define sy (+ 1.0 (/ @Math.random()@ 20]\n(define sx 1.0445291344952077)\n(define sy 1.037120924078791)\n(define slideX (/ w 2]\n(define slideY (/ h 2]\n(define stars @[]@)\n(define renderer)\n(define stage)\n(define (start)\n  (let [(ballTexture @new PIXI.Texture.fromImage(\"bubble_32x32.png\")@)]\n    (set renderer (@PIXI.autoDetectRenderer@ w h))\n    (set stage @new PIXI.Stage@)\n    (document.body.appendChild renderer.view)\n    [dotimes (i starCount)\n      (let [(tempBall @new PIXI.Sprite(ballTexture)@]\n        @tempBall.position.x = (Math.random() * w) - slideX@\n        @tempBall.position.y = (Math.random() * h) - slideY@\n        @tempBall.anchor.x = 0.5@\n        @tempBall.anchor.y = 0.5@\n        @stars.push({ sprite: tempBall, x: tempBall.position.x, y: tempBall.position.y })@\n        @stage.addChild(tempBall)@]\n    @document.getElementById('rnd').onclick = newWave@\n    @document.getElementById('sx').innerHTML = 'SX: ' + sx + '<br />SY: ' + sy@\n    (resize)\n    (requestAnimFrame update)]\n(define (newWave)\n  @sx = 1.0 + (Math.random() / 20)@\n  @sy = 1.0 + (Math.random() / 20)@\n  @$('#sx').html('SX: ' + sx + '<br />SY: ' + sy)@\n  ;@document.getElementById('sx').innerHTML = 'SX: ' + sx + '<br />SY: ' + sy@\n  ]\n(define (resize)\n  (let* ([w (- @$(window).width()@ 32]\n         [h (- @$(window).height()@ 132]\n         [slideX (/ w 2]\n         [slideY (/ h 2])\n    (renderer.resize w h)]\n(define (update)\n  (dotimes (i starCount)\n    (set @stars[i].sprite.position.x@ (+ @stars[i].x@ slideX))\n    (set @stars[i].sprite.position.y@ (+ @stars[i].y@ slideY))\n    (set @stars[i].x@ (* @stars[i].x@ sx))\n    (set @stars[i].y@ (* @stars[i].y@ sy))\n    (cond\n      [(> @stars[i].x@ w) (set @stars[i].x@ (- @stars[i].x@ w))]\n      [(< @stars[i].x@ (* -1 w)) (set @stars[i].x@ (+ @stars[i].x@ w))])\n    (cond\n      [(> @stars[i].y@ h) (set @stars[i].y@ (- @stars[i].y@ h))]\n      [(< @stars[i].y@ (* -1 h)) (set @stars[i].y@ (+ @stars[i].y@ h))])\n   )\n  (renderer.render stage)\n  (requestAnimFrame update)]\n(@$(window).resize@ resize)\n(set window.onorientationchange resize)\n(document.addEventListener \"DOMContentLoaded\", start, #false)\n`); // glob.RUN(\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZXgtYmFsbC50cz8zZmUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBcUM7QUFDckMsSUFBSSxJQUFJLEdBQUcseURBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E0RFgsQ0FBQyxDQUFDLENBQUMsWUFBWSIsImZpbGUiOiIuL3NyYy9leC1iYWxsLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb3B0aU1BTCB9IGZyb20gXCIuL29wdGlNQUwyXCI7XG52YXIgZ2xvYiA9IG9wdGlNQUwod2luZG93KTtcbmdsb2IucnVuQWxsKGBcbihkZWZpbmUgdyAxMDI0KVxuKGRlZmluZSBoIDc2OClcbihkZWZpbmUgc3RhckNvdW50IDI1MDApXG47KGRlZmluZSBzeCAoKyAxLjAgKC8gQE1hdGgucmFuZG9tKClAIDIwXVxuOyhkZWZpbmUgc3kgKCsgMS4wICgvIEBNYXRoLnJhbmRvbSgpQCAyMF1cbihkZWZpbmUgc3ggMS4wNDQ1MjkxMzQ0OTUyMDc3KVxuKGRlZmluZSBzeSAxLjAzNzEyMDkyNDA3ODc5MSlcbihkZWZpbmUgc2xpZGVYICgvIHcgMl1cbihkZWZpbmUgc2xpZGVZICgvIGggMl1cbihkZWZpbmUgc3RhcnMgQFtdQClcbihkZWZpbmUgcmVuZGVyZXIpXG4oZGVmaW5lIHN0YWdlKVxuKGRlZmluZSAoc3RhcnQpXG4gIChsZXQgWyhiYWxsVGV4dHVyZSBAbmV3IFBJWEkuVGV4dHVyZS5mcm9tSW1hZ2UoXCJidWJibGVfMzJ4MzIucG5nXCIpQCldXG4gICAgKHNldCByZW5kZXJlciAoQFBJWEkuYXV0b0RldGVjdFJlbmRlcmVyQCB3IGgpKVxuICAgIChzZXQgc3RhZ2UgQG5ldyBQSVhJLlN0YWdlQClcbiAgICAoZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCByZW5kZXJlci52aWV3KVxuICAgIFtkb3RpbWVzIChpIHN0YXJDb3VudClcbiAgICAgIChsZXQgWyh0ZW1wQmFsbCBAbmV3IFBJWEkuU3ByaXRlKGJhbGxUZXh0dXJlKUBdXG4gICAgICAgIEB0ZW1wQmFsbC5wb3NpdGlvbi54ID0gKE1hdGgucmFuZG9tKCkgKiB3KSAtIHNsaWRlWEBcbiAgICAgICAgQHRlbXBCYWxsLnBvc2l0aW9uLnkgPSAoTWF0aC5yYW5kb20oKSAqIGgpIC0gc2xpZGVZQFxuICAgICAgICBAdGVtcEJhbGwuYW5jaG9yLnggPSAwLjVAXG4gICAgICAgIEB0ZW1wQmFsbC5hbmNob3IueSA9IDAuNUBcbiAgICAgICAgQHN0YXJzLnB1c2goeyBzcHJpdGU6IHRlbXBCYWxsLCB4OiB0ZW1wQmFsbC5wb3NpdGlvbi54LCB5OiB0ZW1wQmFsbC5wb3NpdGlvbi55IH0pQFxuICAgICAgICBAc3RhZ2UuYWRkQ2hpbGQodGVtcEJhbGwpQF1cbiAgICBAZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JuZCcpLm9uY2xpY2sgPSBuZXdXYXZlQFxuICAgIEBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3gnKS5pbm5lckhUTUwgPSAnU1g6ICcgKyBzeCArICc8YnIgLz5TWTogJyArIHN5QFxuICAgIChyZXNpemUpXG4gICAgKHJlcXVlc3RBbmltRnJhbWUgdXBkYXRlKV1cbihkZWZpbmUgKG5ld1dhdmUpXG4gIEBzeCA9IDEuMCArIChNYXRoLnJhbmRvbSgpIC8gMjApQFxuICBAc3kgPSAxLjAgKyAoTWF0aC5yYW5kb20oKSAvIDIwKUBcbiAgQCQoJyNzeCcpLmh0bWwoJ1NYOiAnICsgc3ggKyAnPGJyIC8+U1k6ICcgKyBzeSlAXG4gIDtAZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N4JykuaW5uZXJIVE1MID0gJ1NYOiAnICsgc3ggKyAnPGJyIC8+U1k6ICcgKyBzeUBcbiAgXVxuKGRlZmluZSAocmVzaXplKVxuICAobGV0KiAoW3cgKC0gQCQod2luZG93KS53aWR0aCgpQCAzMl1cbiAgICAgICAgIFtoICgtIEAkKHdpbmRvdykuaGVpZ2h0KClAIDEzMl1cbiAgICAgICAgIFtzbGlkZVggKC8gdyAyXVxuICAgICAgICAgW3NsaWRlWSAoLyBoIDJdKVxuICAgIChyZW5kZXJlci5yZXNpemUgdyBoKV1cbihkZWZpbmUgKHVwZGF0ZSlcbiAgKGRvdGltZXMgKGkgc3RhckNvdW50KVxuICAgIChzZXQgQHN0YXJzW2ldLnNwcml0ZS5wb3NpdGlvbi54QCAoKyBAc3RhcnNbaV0ueEAgc2xpZGVYKSlcbiAgICAoc2V0IEBzdGFyc1tpXS5zcHJpdGUucG9zaXRpb24ueUAgKCsgQHN0YXJzW2ldLnlAIHNsaWRlWSkpXG4gICAgKHNldCBAc3RhcnNbaV0ueEAgKCogQHN0YXJzW2ldLnhAIHN4KSlcbiAgICAoc2V0IEBzdGFyc1tpXS55QCAoKiBAc3RhcnNbaV0ueUAgc3kpKVxuICAgIChjb25kXG4gICAgICBbKD4gQHN0YXJzW2ldLnhAIHcpIChzZXQgQHN0YXJzW2ldLnhAICgtIEBzdGFyc1tpXS54QCB3KSldXG4gICAgICBbKDwgQHN0YXJzW2ldLnhAICgqIC0xIHcpKSAoc2V0IEBzdGFyc1tpXS54QCAoKyBAc3RhcnNbaV0ueEAgdykpXSlcbiAgICAoY29uZFxuICAgICAgWyg+IEBzdGFyc1tpXS55QCBoKSAoc2V0IEBzdGFyc1tpXS55QCAoLSBAc3RhcnNbaV0ueUAgaCkpXVxuICAgICAgWyg8IEBzdGFyc1tpXS55QCAoKiAtMSBoKSkgKHNldCBAc3RhcnNbaV0ueUAgKCsgQHN0YXJzW2ldLnlAIGgpKV0pXG4gICApXG4gIChyZW5kZXJlci5yZW5kZXIgc3RhZ2UpXG4gIChyZXF1ZXN0QW5pbUZyYW1lIHVwZGF0ZSldXG4oQCQod2luZG93KS5yZXNpemVAIHJlc2l6ZSlcbihzZXQgd2luZG93Lm9ub3JpZW50YXRpb25jaGFuZ2UgcmVzaXplKVxuKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgXCJET01Db250ZW50TG9hZGVkXCIsIHN0YXJ0LCAjZmFsc2UpXG5gKTsgLy8gZ2xvYi5SVU4oXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ex-ball.ts\n");

/***/ }),

/***/ "./src/optiMAL2.ts":
/*!*************************!*\
  !*** ./src/optiMAL2.ts ***!
  \*************************/
/*! exports provided: optiMAL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"optiMAL\", function() { return optiMAL; });\n/* harmony import */ var _code2ary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./code2ary */ \"./src/code2ary.ts\");\n\r\nfunction compile_body(ast, start) {\r\n    if (start === ast.length - 1)\r\n        return compile_ast(ast[start]);\r\n    let result = \"(\";\r\n    for (let i = start; i < ast.length; i++) {\r\n        if (i > start)\r\n            result += \",\";\r\n        result += compile_ast(ast[i]);\r\n    }\r\n    return result + \")\";\r\n}\r\nfunction compile_ast(ast) {\r\n    if (ast === undefined)\r\n        return \"undefined\";\r\n    if (!ast) {\r\n        return JSON.stringify(ast);\r\n    }\r\n    if (typeof ast === \"string\") {\r\n        if (ast.match(/^:.+$/))\r\n            return JSON.stringify(ast);\r\n        if (ast.match(/^#.+$/)) {\r\n            switch (ast) {\r\n                case \"#null\":\r\n                case \"#nil\":\r\n                case \"#n\":\r\n                    return \"null\";\r\n                case \"#false\":\r\n                case \"#f\":\r\n                    return \"false\";\r\n                case \"#true\":\r\n                case \"#t\":\r\n                    return \"true\";\r\n                case \"#undefined\":\r\n                case \"#u\":\r\n                    return \"undefined\";\r\n                default:\r\n                    return ast;\r\n            }\r\n        }\r\n        return ast;\r\n    }\r\n    if (!(ast instanceof Array)) {\r\n        return ast.toString();\r\n    }\r\n    if (ast.length === 0)\r\n        return \"[]\"; //return ast;\r\n    switch (ast[0]) {\r\n        case \"`\":\r\n            return JSON.stringify(ast[1]);\r\n        case \"@\":\r\n            return ast[1];\r\n        case \"begin\":\r\n        case \"_do\":\r\n        case \"progn\":\r\n            return compile_body(ast, 1);\r\n        case \"case\": {\r\n            let result = \"(function(){switch(\" + compile_ast(ast[1]) + \"){\";\r\n            let rest = ast.slice(2);\r\n            rest.forEach((x) => {\r\n                let val = x[0];\r\n                switch (val) {\r\n                    case \":else\":\r\n                    case \"else\":\r\n                    case \"otherwise\":\r\n                    case \":otherwise\":\r\n                        result += \"default:\";\r\n                        break;\r\n                    default:\r\n                        if (val instanceof Array && val[0] === \"`\")\r\n                            val = val[1];\r\n                        result += \"case \" + JSON.stringify(val) + \":\";\r\n                }\r\n                let body = compile_body(x, 1);\r\n                result += \"return \" + body + \";\";\r\n            });\r\n            result += \"}return null})()\";\r\n            return result;\r\n        }\r\n        case \"_cond\": {\r\n            function _cond_builder(rest) {\r\n                if (rest.length === 0)\r\n                    return null;\r\n                let condition = rest.shift();\r\n                let action = rest.shift();\r\n                switch (condition) {\r\n                    case true:\r\n                    case \":else\":\r\n                    case \"else\":\r\n                    case \"otherwise\":\r\n                    case \":otherwise\":\r\n                        return action;\r\n                }\r\n                return [\"if\", condition, action, _cond_builder(rest)];\r\n            }\r\n            ast = _cond_builder(ast.slice(1));\r\n            return compile_ast(ast);\r\n        }\r\n        case \"cond\": {\r\n            let new_ast = [];\r\n            ast.slice(1).forEach((x) => {\r\n                new_ast.push(x[0]);\r\n                new_ast.push([\"_do\"].concat(x.slice(1)));\r\n            });\r\n            new_ast.unshift(\"_cond\");\r\n            return compile_ast(new_ast);\r\n        }\r\n        case \"dec!\":\r\n        case \"dec\":\r\n        case \"inc!\":\r\n        case \"inc\":\r\n            let sign = ast[0] === \"dec!\" || ast[0] === \"dec\" ? \"-\" : \"+\";\r\n            let val = ast.length < 3 ? 1 : compile_ast(ast[2]);\r\n            return compile_ast(ast[1]) + sign + \"=\" + val;\r\n        case \"def\":\r\n        case \"def!\": {\r\n            let v = ast[1];\r\n            return \"var \" + v + \"=\" + compile_ast(ast[2]);\r\n        }\r\n        case \"set!\": {\r\n            let v = ast[1];\r\n            return v + \"=\" + compile_ast(ast[2]);\r\n        }\r\n        case \"define\": {\r\n            if (ast[1] instanceof Array) {\r\n                let new_ast = ast.slice(2);\r\n                new_ast.unshift(ast[1].slice(1));\r\n                new_ast.unshift(\"fn\");\r\n                new_ast = [\"def\", ast[1][0], new_ast];\r\n                return compile_ast(new_ast);\r\n            }\r\n            else {\r\n                return compile_ast([\"def\", ast[1], ast[2]]);\r\n            }\r\n        }\r\n        case \"do\":\r\n        case \"do*\":\r\n            return compile_do(ast);\r\n        case \"fn\":\r\n        case \"fn*\":\r\n        case \"lambda\": {\r\n            let args = \"(\";\r\n            for (let i = 0; i < ast[1].length; i++) {\r\n                if (i > 0)\r\n                    args += \",\";\r\n                args += ast[1][i];\r\n            }\r\n            args += \")\";\r\n            if (ast.length < 3)\r\n                return \"function\" + args + \"{}\";\r\n            return \"function\" + args + \"{return \" + compile_body(ast, 2) + \"}\";\r\n        }\r\n        case \"dotimes\": {\r\n            let ast1 = ast[1];\r\n            if (ast1.length < 2)\r\n                ast1 = [\"__dotimes__\", ast1[0]];\r\n            let bind = [\r\n                [\"__dotimes_cnt__\", ast1[1]],\r\n                [\"__dotimes_idx__\", 0, [\"+\", \"__dotimes_idx__\", 1]],\r\n                [ast1[0], \"__dotimes_idx__\", \"__dotimes_idx__\"],\r\n            ];\r\n            let exit = [[\">=\", \"__dotimes_idx__\", \"__dotimes_cnt__\"]];\r\n            ast = [\"do*\", bind, exit].concat(ast.slice(2));\r\n            return compile_ast(ast);\r\n        }\r\n        case \"if\":\r\n            return (\"(\" +\r\n                compile_ast(ast[1]) +\r\n                \"?\" +\r\n                compile_ast(ast[2]) +\r\n                \":\" +\r\n                compile_body(ast, 3) +\r\n                \")\");\r\n        case \"let\":\r\n        case \"let*\": {\r\n            let ast1 = ast[1];\r\n            let new_ast1 = [];\r\n            for (let x of ast1) {\r\n                if (typeof x === \"string\") {\r\n                    new_ast1.push(x);\r\n                    new_ast1.push(undefined);\r\n                }\r\n                else {\r\n                    new_ast1.push(x[0]);\r\n                    new_ast1.push(x[1]);\r\n                }\r\n            }\r\n            return compile_ast([\"_\" + ast[0], new_ast1].concat(ast.slice(2)));\r\n        }\r\n        case \"_let\":\r\n        case \"_let*\": {\r\n            let vars = \"(\";\r\n            let vals = \"(\";\r\n            let assigns = \"\";\r\n            for (let i = 0; i < ast[1].length; i++) {\r\n                if (i % 2) {\r\n                    if (i > 1)\r\n                        vars += \",\";\r\n                    vars += ast[1][i - 1];\r\n                    let val = compile_ast(ast[1][i]);\r\n                    if (i > 1)\r\n                        vals += \",\";\r\n                    vals += val;\r\n                    assigns += ast[1][i - 1] + \"=\" + val + \";\";\r\n                }\r\n            }\r\n            vars += \")\";\r\n            vals += \")\";\r\n            if (ast[0] === \"_let\")\r\n                return (\"((function\" +\r\n                    vars +\r\n                    \"{return \" +\r\n                    compile_body(ast, 2) +\r\n                    \"})\" +\r\n                    vals +\r\n                    \")\");\r\n            else\r\n                return (\"((function\" +\r\n                    vars +\r\n                    \"{\" +\r\n                    assigns +\r\n                    \"return \" +\r\n                    compile_body(ast, 2) +\r\n                    \"})())\");\r\n        }\r\n        case \"set!\":\r\n        case \"set\":\r\n            return compile_ast(ast[1]) + \"=\" + compile_ast(ast[2]);\r\n        case \"throw\": {\r\n            return \"(function(){throw \" + compile_ast(ast[1]) + \"})()\";\r\n        }\r\n        case \"try\": {\r\n            let result = \"(function(){try{return \" + compile_ast(ast[1]) + \"}catch(\";\r\n            result += ast[2][1] + \"){return \" + compile_body(ast[2], 2) + \"}\";\r\n            result += \"})()\";\r\n            return result;\r\n        }\r\n        case \"until\":\r\n        case \"while\": {\r\n            let condition = compile_ast(ast[1]);\r\n            if (ast[0] === \"until\")\r\n                condition = \"!\" + condition;\r\n            return (\"((function(){while(\" +\r\n                condition +\r\n                \"){\" +\r\n                compile_body(ast, 2) +\r\n                \"}})(),null)\");\r\n        }\r\n        case \"=\":\r\n            return \"(\" + compile_ast(ast[1]) + \"===\" + compile_ast(ast[2]) + \")\";\r\n        case \"%\":\r\n        case \"==\":\r\n        case \"===\":\r\n        case \"!=\":\r\n        case \"!==\":\r\n        case \"<\":\r\n        case \">\":\r\n        case \"<=\":\r\n        case \">=\":\r\n            return \"(\" + compile_ast(ast[1]) + ast[0] + compile_ast(ast[2]) + \")\";\r\n        case \"+\":\r\n        case \"-\":\r\n        case \"*\":\r\n        case \"/\": {\r\n            return \"(\" + insert_op(ast[0], ast.slice(1)) + \")\";\r\n        }\r\n        default:\r\n            let fcall = compile_ast(ast[0]) + \"(\";\r\n            for (let i = 1; i < ast.length; i++) {\r\n                if (i > 1)\r\n                    fcall += \",\";\r\n                fcall += compile_ast(ast[i]);\r\n            }\r\n            fcall += \")\";\r\n            return fcall;\r\n    }\r\n}\r\nfunction insert_op(op, rest) {\r\n    let result = [compile_ast(rest[0])];\r\n    for (let i = 1; i < rest.length; i++) {\r\n        result.push(op);\r\n        result.push(compile_ast(rest[i]));\r\n    }\r\n    return result.join(\"\");\r\n}\r\nfunction compile_do(ast) {\r\n    let ast1 = ast[1];\r\n    let parallel = ast[0] === \"do\";\r\n    let ast1_len = ast1.length;\r\n    let ast1_vars = [];\r\n    if (parallel) {\r\n        ast1_vars.push(\"__do__\");\r\n        ast1_vars.push([\"@\", \"new Array(\" + ast1_len + \").fill(null)\"]);\r\n    }\r\n    ast1.forEach((x, i) => {\r\n        ast1_vars.push(x[0]);\r\n        ast1_vars.push(x[1]);\r\n    });\r\n    let ast2 = ast[2];\r\n    if (ast2.length < 2)\r\n        ast2 = [ast2[0], null];\r\n    let until_ast = [\"until\", ast2[0]].concat(ast.slice(3));\r\n    if (parallel) {\r\n        ast1.forEach((x, i) => {\r\n            if (x.length < 3)\r\n                return;\r\n            let next_step = [\"set!\", [\"@\", \"__do__[\" + i + \"]\"], x[2]];\r\n            until_ast.push(next_step);\r\n        });\r\n        ast1.forEach((x, i) => {\r\n            if (x.length < 3)\r\n                return;\r\n            let next_step = [\"set!\", x[0], [\"@\", \"__do__[\" + i + \"]\"]];\r\n            until_ast.push(next_step);\r\n        });\r\n    }\r\n    else {\r\n        ast1.forEach((x, i) => {\r\n            if (x.length < 3)\r\n                return;\r\n            let next_step = [\"set!\", x[0], x[2]];\r\n            until_ast.push(next_step);\r\n        });\r\n    }\r\n    let new_ast = [parallel ? \"_let\" : \"_let*\", ast1_vars].concat([until_ast]);\r\n    new_ast.push(ast2[1]);\r\n    return compile_ast(new_ast);\r\n}\r\n//var $comp$ = new Compiler();\r\nfunction optiMAL(toplevel) {\r\n    let glob = Object.create(toplevel);\r\n    glob.compile_ast_d = (ast) => glob.compile_ast(ast, true);\r\n    glob.compile_ast = (ast, debug) => {\r\n        if (debug)\r\n            console.log(\" [AST] \" + JSON.stringify(ast));\r\n        let text = compile_ast(ast);\r\n        if (debug)\r\n            console.log(\"[CODE] \" + text);\r\n        return text;\r\n    };\r\n    glob.compile_d = (text) => glob.compile(text, true);\r\n    glob.compile = (text, debug) => {\r\n        let steps = Object(_code2ary__WEBPACK_IMPORTED_MODULE_0__[\"code2ary\"])(text);\r\n        let result = \"\";\r\n        for (let step of steps) {\r\n            let exp = step[0];\r\n            let ast = step[1];\r\n            if (debug)\r\n                console.log(\"[LIST] \" + exp);\r\n            if (debug)\r\n                console.log(\" [AST] \" + JSON.stringify(ast));\r\n            let text = compile_ast(ast);\r\n            if (debug)\r\n                console.log(\"[CODE] \" + text);\r\n            result += text + \";\\n\";\r\n        }\r\n        return result;\r\n    };\r\n    glob.run = (exp) => glob.exec(exp, true);\r\n    glob.exec_d = (exp) => glob.exec(exp, true);\r\n    glob.exec = (exp, debug) => {\r\n        let src = exp;\r\n        let steps = Object(_code2ary__WEBPACK_IMPORTED_MODULE_0__[\"code2ary\"])(src);\r\n        let last;\r\n        let text = \"\";\r\n        for (let step of steps) {\r\n            let exp = step[0];\r\n            let ast = step[1];\r\n            var tm1 = new Date().getTime();\r\n            try {\r\n                if (debug)\r\n                    console.log(\"[LIST] \" + exp);\r\n                if (debug)\r\n                    console.log(\" [AST] \" + JSON.stringify(ast));\r\n                text = compile_ast(ast);\r\n                if (debug)\r\n                    console.log(\"[CODE] \" + text);\r\n                let val = eval(text);\r\n                last = val;\r\n                let output;\r\n                if (typeof val === \"function\") {\r\n                    output = \"function\";\r\n                }\r\n                else if (!(val instanceof Array) &&\r\n                    val instanceof Object &&\r\n                    Object.prototype.toString.call(val) !== \"[object Object]\") {\r\n                    try {\r\n                        output =\r\n                            Object.prototype.toString.call(val) + \" \" + JSON.stringify(val);\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n                else {\r\n                    try {\r\n                        output = JSON.stringify(val);\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n                var tm2 = new Date().getTime();\r\n                if (debug) {\r\n                    if (output === undefined) {\r\n                        console.log(\"==> (\" + (tm2 - tm1) + \" ms)\");\r\n                        console.log(val);\r\n                    }\r\n                    else {\r\n                        console.log(\"==> \" + output + \" (\" + (tm2 - tm1) + \" ms)\");\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                if (!debug)\r\n                    console.log(\"[LIST] \" + exp);\r\n                if (!debug)\r\n                    console.log(\" [AST] \" + JSON.stringify(ast));\r\n                if (!debug)\r\n                    console.log(\"[CODE] \" + text);\r\n                console.log(\" [EXCEPTION]\");\r\n                if (e.stack)\r\n                    console.log(e.stack);\r\n                else\r\n                    console.log(e);\r\n                throw e;\r\n                break;\r\n            }\r\n        }\r\n        return last;\r\n    };\r\n    glob.compileAll = (exp, debug) => {\r\n        let src = exp;\r\n        let steps = Object(_code2ary__WEBPACK_IMPORTED_MODULE_0__[\"code2ary\"])(src);\r\n        let result = \"\";\r\n        for (let step of steps) {\r\n            let exp = step[0];\r\n            let ast = step[1];\r\n            if (debug)\r\n                console.log(\"[LIST] \" + exp);\r\n            if (debug)\r\n                console.log(\" [AST] \" + JSON.stringify(ast));\r\n            let text = compile_ast(ast);\r\n            if (debug)\r\n                console.log(\"[CODE] \" + text);\r\n            result += text + \";\\n\";\r\n        }\r\n        return result;\r\n    };\r\n    glob.execAll = (exp, debug) => {\r\n        let text = glob.compileAll(exp, debug);\r\n        return eval(text);\r\n    };\r\n    glob.runAll = (exp) => {\r\n        return glob.execAll(exp, true);\r\n    };\r\n    return glob;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/optiMAL2.ts\n");

/***/ })

/******/ });